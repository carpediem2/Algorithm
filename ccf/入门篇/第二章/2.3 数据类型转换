数据类型转换就是将数据（变量，表达式的结果）从一种类型转换到另一种类型。

2.3.1 自动类型转换
    def：在不同数据类型的混合运算中，编译器会隐式地进行数据类型转换
    规则为：
       （1）若参与运算的数据类型不同，则先转换成同一类型，然后进行运算。
       （2）转换按数据长度增加的方向进行，以保证精度不降低。如int类型和long类型运算时，先把int类型转换为long类型再运算。
            即当参加算数或比较运算的两个操作数类型不统一时，将简单类型向复杂类型转换 char(short)-->int(long)-->float-->double
        (3)赋值运算中，赋值号两边的数据类型不同时，将把右边表达式值的数据类型转换为左边变量的类型。
            若右边表达式值的数据类型长度比左边长时，将丢失一部分数据。
       （4）在赋值语句中，赋值号两边数据类型一定是相兼容的类型。如果等号两边数据类型不兼容，语句在编译时会报错。
 
2.3.2 强制类型转换
    def：当自动类型转换不能实现目的时，可以显式进行类型转换。
    格式：
        （类型名）（表达式）   如：（int）（x+y)       (float)(5%3)
        （类型名）（变量）     如： (double)a
    
 不管是强制转换还是自动转换，都只是为了本次运算的需要而对变量的数据长度进行的临时性转换，不改变数据说明时对该变量的定义。
 
 
 //exam
#include<iostream>
using namespace std;
int main()
{
   int a,b,c,s;
   a=156282822;
   b=218282822;         //结果错误，s值超过int类型规定的数据范围
   c=183839311;
   s=a+b+c;
   cout<<"s="<<s<<endl;
   return 0;
}


 //exam
#include<iostream>
using namespace std;
int main()
{
   int a,b,c;
   long long s;
   a=156282822;
   b=218282822;         //结果错误，a,b,c均为int类型，赋值语句左边的数据类型不影响运算结果。
   c=183839311;
   s=a+b+c;
   cout<<"s="<<s<<endl;
   return 0;
}



 //exam
#include<iostream>
using namespace std;
int main()
{
   int a,b,c;
   long long s;
   a=156282822;
   b=218282822;         //结果错误，a,b,c均为int类型，赋值语句左边的数据类型不影响运算结果。
   c=183839311;
   s=(long long)a+b+c;
   cout<<"s="<<s<<endl;
   return 0;
}

2.3.3 字符型和整形的转换
将一个字符存放到内存单元时，实际上并不是把该字符本身放到内存单元中去，而是将该字符相应的ASCII代码放到存储单元中。
如：'a'--->ASCII码97--->01100001
字符数据以ASCII码存储，他的存储形式与整数的存储形式类似。
-->C++中字符型数据与整数数据之间就可以通用，可相互赋值。此时相当于对它们的ASCII码进行算术运算。

ASCII代码表中：每一个小写字母比它相应的大写字母的ASCII代码大32.
