2.7.1 什么是指针
     变量在内存的存放：
        在计算机中，每个字节都会有一个地址，即变量存放的位置。（类似于房间和房间号）计算机就是通过地址找到某个变量的。
        变量地址一般指它占用的字节中第一个字节的地址。如int型变量占用四个字节，第一个字节位置就是变量地址
     C语言中用‘指针’来表示内存地址（或称指针指向了内存地址），若这个内存地址恰好是某个变量的地址，则称（这个指针指向该变量）
     只要在变量前面加上&，就表示变量的地址。
     //exam
     #include <cstdio>
     int main(){
       int a = 1;
       printf("%d,%d\n",&a,a);    //2686748,1
       return 0;
     }
     (指针是一个unsigned类型的整数)
     
    
    
2.7.2 指针变量
    指针变量用来存放指针（或者可以理解成地址），它在某种数据类型后加星号*来表示这是一个指针变量，如：
        int* p;
        double* p;
        char* p;
    (星号"*"在数据类型之后或是变量名之前都是可以的，编译器不会对此进行区分)
    
    （若有好几个同种类型的指针变量要同时定义，星号只会结合于第一个变量名）如：
        int* p1,p2;   //p1是int*型的，p2是int型的；
     
     （若要让后面定义的变量也是指针变量，需在后面每个变量名前加上星号）如：
        int* p1,*p2，*P3;
        /int *p1,*p2,*P3;        //更美观
        
        指针变量存放的是地址，而&则是取地址运算符。给指针变量赋值的方式一般是把变量的地址取出来，
      然后赋给对应类型的指针变量。如：
         int a;
         int* p = &a;
      也可以写成：
         int a;
         int* p;
         p = &a；
       多个指针初始化：
         int a,b;
         int *p1=&a,*p2=&b;
         
       int*是指针变量的类型，后面的p才是变量名，用来存储地址。地址&a是赋值给p而不是*p。（星号是类型的一部分）
       利用指针变量获取变量。（*p）如：
         //exam
         #include <cstdio>
         int main(){
           int a;
           int* p = &a;
           a = 233;
           printf("%d\n",*p);   //233
           return 0;
         }
         (p保存的是地址，*p是这个地址存放的元素。可以通过直接对 "*p" 赋值,改变保存的元素)
         //exam
         #include <cstdio>
         int main(){
           int a;
           int* p = &a;
           *p = 233;
           printf("%d,%d\n",*p,a);   //233,233
           return 0;
         }
         (指针变量支持加减法，减法的结果就是两个地址偏移的距离。对int型指针变量p来说，
         p+1是指p所指的int型变量的下一个int型变量地址。此处的下一个是跨越了一整个int型（4字节）)。
         指针变量支持自增和自减操作（p++等同于p=p+1）
         指针变量存储的地址的类型称为基类型。如int* p的指针变量，int就是它的基类型。
         基类型必须和指针变量存储的地址类型相同，上面定义的指针变量p不能存放double型或char型数据的地址
         
         
2.7.3 指针和数组
       
         
