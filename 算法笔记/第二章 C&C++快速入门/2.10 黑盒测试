黑盒测试：系统后台会准备若干组输入数据，然后让提交的程序去运行这些数据，若输出结果与正确答案完全相同
（字符串意义上的比较），则称通过了这道题的黑盒测试，否则会根据错误类型返回不同的结果。
黑盒测试分为：
        单点测试：对每组测试数据都单独测试
        多点测试：一次性测试所有的测试数据

2.10.1 单点测试
     对单点测试，系统会判断每组数据的输出结果是否正确。若输出正确，则对该组数据来说就通过了测试，
    并获得了这组数据的分值。这种情况下，题目的总得分等于通过的数据的分值之和。
     从代码编写上来说，单点测试只需按正常的逻辑执行一遍程序即可，即：程序只需对一组数据能够完整执行即可。
     //exam
     #include <cstdio>
     int main(){
       int a,b;
       scanf("%d%d",&a,&b);
       printf("%d\n",a+b);
       return 0;
     }
2.10.2 多点测试
    多点测试：要求程序能一次运行所有数据，并要求所有输出结果都必须完全正确，才能算这题通过；
   只要有其中一组数据的输出错误，本题就只能得0分。
   
   ！！只有这种方式才能严格考验做题人的代码是否严谨！！！
   
   因为要求程序能运行所有数据，因此必须保证程序有办法反复执行代码的核心部分，这就要用到循环。
   题目一般有以下三种输入的格式：
   
   1.while...EOF型
     若题目未给定输入的结束条件，就默认读到文件的末尾
     scanf函数有返回值，且返回值为其成功读入的参数的个数。如：scanf("%d",&n)返回值为1.
     正常控制台（屏幕黑框）中的输入一般不会失败，只有在读取文件到达末尾导致无法读取的现象，才会产生读入失败。
     这是scanf函数会返回-1而不是0，且C语言中使用EOF(End Of File)来代表-1
     
     -->当题目未说明有多少数据需要读入时，可以利用sacnf的返回值是否为EOF来判断输入是否结束。
     //exam
     while(scanf("%d",&n) != EOF){ //只有scanf的返回值不为EOF，就反复读入n，执行while函数体的内容
        ...                        //当读入失败，即到达文件末尾时，结束while循环
     }
     codeup 1000
     //exam
     #include<cstdio>
     int main(){
       int a,b;
       while(scanf("%d%d",&a,&b) != EOF){
         printf("%d\n",a+b)
       }
       return 0;
     }
     
     ！在黑框输入数据时，并不会触发EOF状态。若要在黑框手动触发EOF，可以按<Ctrl+Z>组合键，这时会显示一个^Z,按<Enter>就可以结束while
     当读入字符串时,有下面两种方式可用：
        while(scanf("%s",str) != EOF){
          ...
        }
        while(gets(str) != NULL){
          ...
        }
        
     2.while...break型
       是上面while...EOF型的延伸，用于题目要求 当输入的数据满足某个条件时停止输入
       两种写法：
         1）.在while...EOF内部进行判断，当满足退出条件时中断（break）当前的while循环
         #include<cstdio>
         int main(){
           int a,b;
           while(scanf("%d%d",&a,&b) != EOF){
              if（a == 0 && b==0）break;
              printf("%d\n",a+b);
           }
           return 0;
         }
         
         2)更简洁的写法是，把退出条件的判断放到while语句中，令其余scanf用逗号隔开：
         #include<cstdio>
         int main(){
           int a,b;
           while(scanf("%d%d",&a,&b),a||b){  //a||b--->a!=0||b!=0 当a和b中有一个不为0时就进行循环
               printf("%d\n",a+b);
           }
         }
         
         
       3）.while(T--)型
         当题目中，给出测试数据的组数，然后才给出相应数量组数的输入数据时使用。
         由于给定了测试数据的组数，因此需要用一个变量T来存储，并在程序开始时读入。
         在读入T后，下面就可以进行T次循环，每次循环解决一组数据的输入与输出。
         //exam
         #include<cstdio>
         int main(){
           int T,a,b;
           scanf("%d",&T);
           while(T--){
             scanf("%d%d",&a,&b);
             printf("%d\n",a+b);
           }
           return 0;
         }
         
         
         
      ！三种常见的输出类型。
      1）.正常输出
          这种输出类型要求需要每两组输出数据中间没有额外的空行，即输出数据是连续的多行。
      2）.每组数据输出之后都额外加一个空行
         只需在每组输出结束之后额外输出一个换行符\n即可。
         //exam
         #include<cstdio>
         int main(){
            int a,b;
            while(scanf("%d%d".&a,&b) != EOF){
              printf("%d\n",a+b);
              printf("\n");
            }
            return 0;
         }
       3).两组输出数据之间有一个空行，最后一组数据后面没有空行
          这一般是在第三种输入类型while(T--)的情况下，只需要通过判断T是否已经减小到0来判断是否应当输出额外的换行
          //exam
          #include <cstdio>
          int main(){
            int T,n,a;
            scanf("%d",&T);
            while(T--){
               int sum = 0;
               scanf("%d",&n);
               for(int i = 0;i < n;i++){
                  scanf("%d",&a);
                  sum += a;
               }
               printf("%d\n",sum);
               if(T > 0) printf("\n");
            }
            return 0;
          }
        ！类似的有：输出一行N个整数， 每两个整数之间用空格隔开，最后一个整数后面没有，不允许加上空格
        //exam
        for(int i = 0;i < N;i++){
          printf("%d",a[i]);
          if(i < N-1) printf("");
          else printf("\n");
        }
        
      ！！在多点测试中，每一次循环都要重置一下变量和数组，否则在下一组数据来临时，变量和数组的状态就不是初始状态了。
      如上例，sum = 0 的语句就必须放在while内，否则第二组数据来临时sum就不是0了。
      ！！重置数组一般使用memset函数或fill函数
