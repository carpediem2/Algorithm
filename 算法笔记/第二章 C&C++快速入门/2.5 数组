2.5.1 一维数组
   数组：把相同数据类型的变量组合在一起而产生的数据集合。每个变量在内存中都有对应的存放地址，而数组就是从某个地址开始连续若干个位置形成的元素集合。
   一维数组定义格式：
      数据类型 数组名[数组大小]；
      
2.5.2 冒泡排序
    冒泡排序本质是交换。每次通过交换的方式把剩余元素的最大值移到一端，直至剩余元素减少为0，结束排序。
    如：{3,4,1,5,2}-->第一轮结束{3,1,4,2,5}-->第二轮{1,3,2,4,5}-->第三轮{1,2,3,4,5}-->第四轮{1,2,3,4,5}
    //exam
    #include<cstdio>
    int mian(){
      int a[10] = {3,1,4,5,2};
      for(int i = 1;i <= 4;i++){  //进行n-1趟
         //第i趟时从a[0]到a[n-i-1]都与它们下一个数比较
         for(int j = 0;j < 5-i;j++){
           if(a[j]>a[j+1]){   //交换
             int temp = a[j];   //第一趟从a[0]到a[3]都需要与下一个数比较
             a[j] = a[j+1];     //第二趟从a[0]到a[2]都需要与下一个数比较
             a[j+1] = temp;     //第三趟从a[0]到a[1]都需要与下一个数比较
           }                    //第四趟只有a[0]需要与下一个数比较
         }                     //第i趟时，从a[0]到a[n-i-1]都需要与下一个数比较
      }
      for(int i = 0;i < 5;i++){
         printf("%d",a[i]);
      }
    }
    
    
2.5.3 二维数组
    格式：
       数据类型 数组名[第一维大小][第二维大小]；
    常见定义：
       int a[5][6];
       double db[10][10];
       char [256][256];
       bool vis[1000][1000];
    元素的访问：
       数组名 [下标1][下标2]。定义为 int a[n][n]的二维数组，下标取值只能是 0~（n-1）
    初始化：
       按一维的顺序依次用大括号给出二维的初始化情况，然后将它们用逗号分隔，并用大括号全部扩住。
       被赋值元素之外的部分将被默认赋值为0.
       int a[5][6] = {{3,1,2},{8,4},{},{1,2,3,4,5}};
       输出结果：
         3 1 2 0 0 0 
         8 4 0 0 0 0 
         0 0 0 0 0 0 
         1 2 3 4 5 0 
         0 0 0 0 0 0 
      两个二位数组对应位置相加：
      #include <cstdio>
      int main(){
        int a[3][3],b[3][3];
        for(int i = 0;i < 3;i++){
          for(int j = 0;j <3;j++){
             scanf("%d",&a[i][j]); //输入二维数组a的元素
          }
        }
        for(int i = 0;i < 3;i++){
          for(int j = 0;j <3;j++){
             scanf("%d",&b[i][j]); //输入二维数组b的元素
          }
        }
        int c[3][3];
        for(int i = 0;i < 3;i++){
          for(int j = 0;j <3;j++){
             c[i][j] = a[i][j] + b[i][j];  //对应位置元素相加并放到二维数组c中
          }
        }
        for(int i = 0;i < 3;i++){
          for(int j = 0;j <3;j++){
             scanf("%d",&c[i][j]); //输入二维数组c的元素
          }
          printf("\n");
        }
        return 0;
      }
      //输入：
            1 2 3
            4 5 6
            7 8 9
            1 4 7
            2 5 8
            3 6 9
         输出:
            2 6 10
            6 10 14
            10 14 18
      (特别提醒：
          若数组大小较大（大概10^6级别），则需要将其定义在主函数外面，否则会使程序异常退出，
          原因是函数内部申请的局部变量来自系统栈，允许申请的空间较小；
              而函数外部申请的全局变量来自静态存储区，允许申请的空间较大)
       多维数组：与二维数组类似，只是把维度增加了若干维。
       int a[3][3][3];
       for(int i = 0;i < 3;i++){
          for(int j = 0;j <3;j++){
            for(int k = 0;k < 3;k++){
               scanf("%d",&a[i][j]); //输入三维数组a的元素
           }
         }
       } 
       
2.5.4 memset--对数组中每一个元素赋相同的值
      对数组中每一个元素赋相同的值有两种方法：memset函数和fill函数。
      格式：
          memset(数组名，值，sizeof(数组名))；
      （开头需要加 "string.h" 头文件，且只建议初学者使用memset赋0或-1. ）
      （这是因为memset使用的是按字节赋值，即对每个字节赋同样的值，这样组成int型的4个字节就会被赋成相同的值）
      （而由于0的二进制补码为全0，-1的二进制补码为全1，不容易弄错。）
      （如果要对数组赋其他数字，请使用fill函数（但memset的执行速度快））
      //exam
      int a[5] = {1,2,3,4,5};
      memset(a,0,sizeof(a));  //赋初值0
      
2.5.5 字符数组
      1.字符数组的初始化：
      char str[15] = {'G','o','o','d','','s''!'};
      除此之外，字符数组也可以通过直接赋值字符串来初始化（仅限于初始化，程序其他位置不允许这样直接赋值整个字符串）
      char str[15] = "Good Story!";
      2.字符数组的输入输出：
        1）.scanf输入,printf输出
            scanf对字符类型有  %c和%s两种格式（printf同理，下同）,其中%c用来输入单个字符，%s用来输入一个字符串并存在字符数组里。
            %c格式能够识别空格跟换行并将其输入，而%s通过空格和换行来识别一个字符串的结束。
            //exam
            char str[10];
            scanf("%s",str);  //TAT TAT TAT
            printf("%s",str);  //TAT
            （%s识别空格作为字符串的结尾，因此后两个TAT不会被读入。另外，scanf在使用%s时，后面对应数组名前面不需要加&取地址运算符）
        2）getchar输入，putchar输出
           getchar和putchar分别用来输入和输出单个字符
           //exam
           #include<cstdio>
           int main(){
              char str[5][5];
              for(int i = 0;i < 3;i++){
                 for(int j = 0;j < 3;j++){
                    str[i][j] = getchar();
                 }
                 getchar();    //这句是为了把输入中的每行末尾的换行符吸收掉
              }
              for（int i = 0;i < 3;i++）{
                 for(int j = 0;j < 3;j++){
                    putchar(str[i][j]);
                 }
                 putchar('\n');
              }
              return 0;
           }
           输入： 
               ^-^
               _^_
               ^_^
           输出的结果和输入相同
         3）gets输入，puts输出
             gets用来输入一行字符串（注意：gets识别换行符\n作为输入结束，因此scanf完一个整数后，若要使用gets，需先用getchar接受整数后的换行符），
             并将其存放于一维数组（或二维数组的一维）中；puts输出一行字符串，并紧跟一个换行。
       3.字符数组的存放方式
          字符数组由若干个char类型的元素组成，字符数组每一位都是一个char字符。
          在一维字符数组（或是二维字符数组的第二维）的末尾都有一个空字符"\0"，以表示存放的字符串的结尾
          空字符"\0"在使用gets或scanf输入字符串时会自动添加在输入的字符串后面，并占用一个字符位。
          而puts与printf就是通过识别"\0"作为字符串的结尾来输出的。
          
       （特别提醒：）
            （结束符"\0"的ASCII码为0，即空字符NULL，占用一个字符位，因此开字符数组时一定记得：
                      字符数组的长度一定要比实际存储字符串的长度至少多1.）
             （int型数组的末尾不需要加"\0",只有char型数组需要。还需要注意"\0"跟空格不是同一个东西，空格的ASCII码是32，切勿混淆。）
             （若非使用scanf函数的%s格式或gets函数输入字符串（例如使用getchar），一定要在输入的字符串后加入"\0",
             否则printf和puts函数输出字符串会因为无法识别字符串末尾而输出一大堆乱码）
             
    
    2.5.6 string.h头文件
          string.h头文件包含了许多用于字符数组的函数。使用以下函数时需在程序开头添加头文件。
             1.strlen（）
                strlen（）函数可以得到字符数组的第一个"\0"前的字符的个数，格式为：
                    strlen（字符数组）；
          //exam
          #include <cstdio>
          #include <cstring>
          int main(){
            char str[10];
            gets(str);        //meneda
            int len = strlen(str);
            printf("%d\n",len);   //6
            return 0;
          }
             2.strcmp()
                strcmp函数返回两个字符串大小的比较结果，比较原则是按 字典序，格式如下
                      strcmp（字符数组1，字符数组2）；
                所谓的字典序就是：字符串在字典中的顺序。如：两个字符数组str1和str2，若满足：
                     str1[0···k-1]==str2[0···k-1]、str1[k]<str2[k],则str1的字典序小于str2.
                     如："a"的字典序小于"b","aaaa"的字典序小于"aab"，"Dear Mozart"的字典序大于"Canon"
                strcmp的返回结果如下：
                   1）若字符数组1<字符数组2，则返回一个负整数(不同编译器处理不同，不一定是-1)
                   2）若字符数组1=字符数组2，则返回0
                   3）若字符数组1>字符数组2，则返回一个正整数(不同编译器处理不同，不一定是+1)
              3.strcpy()
                strcpy函数可以把一个字符串复制给另一个字符串，格式：
                    strcpy（字符数组1，字符数组2）；//是把字符数组2复制给字符数组1，这里的复制包括了结束符"\0".
              4.strcat()
                 strcat()立意把一个字符串接到另一个字符串后面。格式：
                      strcat（字符数组1，字符数组2）；//把字符数组2接到字符数组1后面
               
      
2.5.7 sscanf与sprintf(在stdio.h头文件下)
      sscanf = string + scanf
      sprintf = string + printf
      scanf（"%d",&n）;----->可表示为：scanf（screen,"%d",&n）;把屏幕的内容以"%d"格式传输到n中
      printf("%d",n);------>          printf(screen,"%d",n);把n以"%d"的格式传输到屏幕上。
      （sscanf和sprintf与上面格式相同，只不过把screen换成了字符数组。）
      sscanf（str,"%d",&n）;把字符数组str中的内容的内容以"%d"格式传输到n中
      sprintf(str,"%d",n);把n以"%d"的格式传输到str字符数组中。
      //exam
      使用sscanf将字符数组str中的内容按"%d:%lf,%d"的格式写到int型变量n，double型变量db，char型数组str2中
      #include <cstdio>
      int main(){
         int n;
         double db;
         char str[100] = "2048:3.14,hello",str2[100];
         sscanf(str."%d:%lf,%s",&n,&db,&str2);
         printf("n = %d,db = %.2f,str = %s\n",n,db,sr2); //n=2048,db=3.14,str2=hello
         return 0;
      }
      
      //exam
      使用sprintf将int型变量n，double型变量db，char型数组str2按"%d:%.2f,%s"的格式写到字符数组str中
      #include <cstdio>
      int main(){
         int n = 12;
         double db = 3.1415;
         char str[100],str2[100] = "good";
         sprintf(str,"%d:%.2f,%s",n,db,str2);
         printf("str = %s\n",str);   //str = 12:3.14,good
         return 0;
      }
      (sscanf还支持正则表达式，许多字符串问题可配合正则表达式来进行字符串的处理)
      
             
