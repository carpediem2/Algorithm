2.2.1 赋值表达式
 int n = 5;
 int n,m;
 n = m = 5;
 赋值运算符可以通过将其他运算符放在前面来实现赋值操作的简化，如：
    n += 2---->n=n+2, n *= 3----->n = n * 3;n /= m+1最好写成 n/=(m+1)

2.2.2 使用scanf和printf输入输出
int-->%d  scanf("%d",&n)   long long-->%lld  scanf("%lld",&n)
float-->%f   scanf("%f",fl)    double-->%lf   scanf("%lf",&db)
char-->%c   scanf("%c",&c)     字符串（char数组）-->%s  scanf("%s",str)
数组名称本身就代表了这个数组第一个元素的地址，所以不需要再加取地址运算符。
（scanf中，除char数组整个输入的情况不加&之外，其他变量类型都需要加&）

类似  13:45:20   这种  hh:mm:ss 的时间需要输入，可：
    int hh,mm,ss;
    scanf("%d:%d:%d",&hh,&mm,&ss);   //scanf的双引号内的内容其实就是整个输入，只不过把数据换成他们对应的格式符并把变量的地址按次序卸载后面

再如 12,18.23，t  可：
    int a;
    double b;
    char c;
    scanf("%d,%lf,%c",&a,&b,&c);
若  3 4  这种用空格隔开的两个数字，两个%d之间可以不加空格：
    int a,b;
    scanf("%a%b",&a,&b);
   原因是：除%c外，scanf对其他格式符（如%d）的输入是以空白符（即空格、Tab）为结束判断标志的，因此
   除非使用%c把空格按字符读入，其他情况都会自动跳过空格。另外，字符数组使用%s读入的时候以空格跟换行
   为读入结束的标志。如：
     #include <stdio.h>
     int main(){
        char str[10];
        scanf("%s",str);   //输入abcd efg
        printf("%s",str);   //输出abcd
        return 0;
     }
     
     
     #include <stdio.h>
     int main(){
        int a;
        char c,str[10];
        scanf("%d%c%s",&a,&c,str);   //输入1 a bcd
        printf("a=%d,c=%c,str=%s",a,c,str);   //输出a=1,c= ,str=a
        return 0;
     }
    (若在输入数据后程序异常退出，要马上考虑是否在scanf中漏写&)
 
 
 printf
     printf("格式控制",变量名称);
     
     int n = 5;
     printf("%d",n);
     
  int-->%d    printf("%d",&n)    long long-->%lld  printf("%lld",&n)
  float-->%f   printf("%f",fl)    double-->%f   printf("%f",&db)
  char-->%c   printf("%c",&c)     字符串（char数组）-->%s  printf("%s",str)   
  (对于double类型的变量，其输出格式变成了%f，而在scanf中却是%lf。)
 （不要因为float的scanf和printf的格式符都是%f比较好记就偷懒用float，因为float的精度较低）
  #include <stdio.h>
     int main(){
        float f1=8765.4,f2=8765.4;
        double d1=8765.4,d2=8765.4;
        printf("%f\n%f\n",f1*f2,d1*d2);   //输出 76832244.007969
        return 0;                         //     76832237.160000
     }
     两个float类型的浮点数相乘，精度在整数部分就已经不准确了，完全不能满足要求。建议用double
     （"%%";"\\"输出%，\）
     三种实用输出格式
     1）%md
        使不足m位的int型变量以m位进行右对齐输出，其中高位用空格补齐；如果变量本身超过m位，则保持原样
         #include <stdio.h>
         int main(){
            int a = 123,b = 1234567;
            printf("%5d\n",a);   //输出  123 //不足五位，前面自动用两个空格填充，使整个输出凑足五位
            printf("%5d\n",b);   //输出1234567
            return 0;                        
         }
     2）%0md
        使不足m位的int型变量以m位进行右对齐输出，其中高位用0补齐；如果变量本身超过m位，则保持原样 
        #include <stdio.h>
         int main(){
            int a = 123,b = 1234567;
            printf("%05d\n",a);   //输出 00123 //不足五位，前面自动用两个0填充，使整个输出凑足五位
            printf("%05d\n",b);   //输出1234567
            return 0;                        
         }
         
      3）%.mf
        让浮点数保留m位小数输出，“保留”使用的是精度的“四舍六入无成双”规则。若是四舍五入，则是使用round函数
        #include <stdio.h>
         int main(){
            double d1 = 12.3456;
            printf("%.0f\n",d1);   //12
            printf("%.1f\n",d1);   //12.3
            printf("%.2f\n",d1);   //12.35(变成5)
            printf("%.3f\n",d1);   //12.346
            printf("%.4f\n",d1);   //12.3456
            return 0;                        
         }
         
  2.2.3  使用getchar和putchar输入\输出字符
          getchar用来输入单个字符，putchar用来输出单个字符，在某些scanf函数使用不便的场合可以使用getchar来输入字符。
          #include<stdio.h>
          int main(){
            char c1,c2,c3;
            c1 = getchar();
            getchar();
            c2 = getchar();
            c3 = getchar();
            putchar(c1);
            putchar(c2);
            putchar(c3);
            return 0;
          }
          输入abcd,输出acd
          输入ab，然后按<Enter>键，再输入'c',再按<Enter>键。结果是a
                        
                                                               c  //getchar可以识别换行符，所以c2储存的是换行符\n,
                                                                  //因此在a和c之间会有一个换行出现
 2.2.4 注释
   （1）使用/**/注释，对“/*”和“*/”之间的内容进行注释，且可连续注释若干行的内容
   （2）使用“/”注释。“//”可用以注释一行中该符号后的所有内容，效果仅限于该行。
 
 2.2.5 typedef
   typedef可以给复杂的数据结构起一个别名，这样在使用中就可以用别名代替原来的写法。如：
  数据类型是long long 时，可用LL来代替long long,以避免因在程序中出现大量的long long而降低编码效率。
  #include <cstdio>
  typedef long long LL;   //给 long long起个别名LL
  int main(){
    LL a = 123456789012345, b = 234567890123456;  //直接使用LL
    printf("%lld\n",a+b);  //输出 358024679135801
    return 0;
  }
  
 2.2.6 常用math函数
    如需使用，需在程序开头加上math.h头文件
    
    1.fabs(double x)
     该函数用于对double型变量取绝对值
     #include <stdio.h>
     #include <math.h>
     int main(){
       double db = -12.56;
       printf("%.2f\n",fabs(db));  //输出12.56
       return 0;
     }
    
    2.floor(double x)和 ceil(double x)
    分别用于double型变量的向下取整和向上取整，返回类型为double型。
    #include <stdio.h>
    #include <math.h>
    int main(){
       double db1 = -5.2，db2 = 5.2;
       printf("%.0f %.0f\n",floor(db1),ceil(db1));  //输出-6 -5
       printf("%.0f %.0f\n",floor(db2),ceil(db2));  //输出5 6
       return 0;
     }
     
    3.pow(double r,double p)
    该函数用于返回r^p,要求r和p都是double型：
    #include <stdio.h>
    #include <math.h>
    int main(){
       double db = pow(2.0,3.0);
       printf(%f\n",db);  //输出8.000000
       return 0;
     }
     
    4.sqrt(double x)
     该函数用于返回double型变量的算术平方根
     #include <stdio.h>
     #include <math.h>
     int main(){
        double db = sqrt(2.0);
        printf("%f\n",db);  //输出1.414214
        return 0;
      }
  
    5.log(double x)
    该函数用于返回double型变量的以自然对数为底的对数：
    #include <stdio.h>
    #include <math.h>
    int main(){
       double db = log(1.0);
       printf("%f\n",db);  //输出0.000000
       return 0;
     }
     (C语言中没有对任意底数求对数的函数，因此必须使用换底公式来将不是以自然数为底的对数转换为以e为底的对数。即loga^b=loge^b/loge^a)
     
    6.sin(double x),cos(double x),tan(double x)
    这三个函数分别返回double型变量的正弦值、余弦值和正切值。参数要求是弧度制。
    #include <stdio.h>
    #include <math.h>
    const double pi = acos(-1.0)
    int main(){
       double db1 = sin(pi * 45/180);
       double db2 = cos(pi * 45/180);
       double db3 = tan(pi * 45/180);
       printf("%f,%f,%f\n",db1,db2,db3);  //输出0.707107 ， 0.707107 ， 1.000000
       return 0;
     }
     （此处把pi定义为精确值acos（-1.0）（因为cos（pi）=-1））
     
    7.asin(double x),acos(double x),atan(double x)
    这三个函数分别返回double型变量的反正弦值、反余弦值和反正切值。
    #include <stdio.h>
    #include <math.h>
    int main(){
       double db1 = sin(1);
       double db2 = cos(-1.0);
       double db3 = tan(0);
       printf("%f,%f,%f\n",db1,db2,db3);  //输出1.570796 ， 3.141593 ， 0.000000
       return 0;
     }
     
    8.round(double x)
    该函数用于将double型变量x四舍五入，返回类型也是double型，需进行取整。
    6.sin(double x),cos(double x),tan(double x)
    这三个函数分别返回double型变量的正弦值、余弦值和正切值。参数要求是弧度制。
    #include <stdio.h>
    #include <math.h>
    int main(){
       double db1 = round(3.40);
       double db2 = round(3.45);
       double db3 = round(3.50);
       double db4 = round(3.55);
       double db5 = round(3.60);
       printf("%d,%d,%d,%d,%d\n",(int)db1,(int)db2,(int)db3,(int)db4,(int)db5);  //输出3,3,4,4,4
       return 0;
     }
